<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>misc01（buuctf）</title>
      <link href="/2025/02/19/misc01/"/>
      <url>/2025/02/19/misc01/</url>
      
        <content type="html"><![CDATA[<h2 id="ACTF新生赛2020-NTFS数据流"><a href="#ACTF新生赛2020-NTFS数据流" class="headerlink" title="[ACTF新生赛2020]NTFS数据流"></a>[ACTF新生赛2020]NTFS数据流</h2><p>打开题目，压缩包中有很多txt文件：</p><p><img src="https://pic1.imgdb.cn/item/67b5c50fd0e0a243d400cbfb.png" alt=""></p><p>根据题目内容，这道题与NTFS数据流有关。</p><p><a href="https://zhida.zhihu.com/search?content_id=233605059&amp;content_type=Article&amp;match_order=1&amp;q=NTFS交换数据流&amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDAxMzg1NzIsInEiOiJOVEZT5Lqk5o2i5pWw5o2u5rWBIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MjMzNjA1MDU5LCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.cCc3GhCjuAA7R4AYrkmsn9rnRK_cO0drkgFLVTjovYY&amp;zhida_source=entity">NTFS交换数据流</a>（<a href="https://zhida.zhihu.com/search?content_id=233605059&amp;content_type=Article&amp;match_order=1&amp;q=Alternate+DataStreams&amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDAxMzg1NzIsInEiOiJBbHRlcm5hdGUgRGF0YVN0cmVhbXMiLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoyMzM2MDUwNTksImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.bUEPkzGqX6i5lQ2K6tsnij65Hb7Ncm4gDeK-4RE_cKk&amp;zhida_source=entity">Alternate DataStreams</a>，简称ADS）是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流。通俗的理解，就是其它文件可以“寄宿”在某个文件身上。</p><p>使用工具NtfsStreamsEditor或AlternateStreamView打开存放tmp文件夹，扫描出现NTFS交换数据流文件，导出后打开，得到flag（或双击查看）。</p><p><img src="https://pic1.imgdb.cn/item/67b5c971d0e0a243d400cd00.png" alt=""></p><p>flag:</p><p><img src="https://pic1.imgdb.cn/item/67b5c945d0e0a243d400cce8.png" alt=""></p><h2 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h2><p>流量包，用wireshark打开：</p><p><img src="https://pic1.imgdb.cn/item/67b5cbefd0e0a243d400cd7e.png" alt=""></p><p>题目为sqltest，那么猜测应该是让我们分析sql注入攻击的流量。</p><p>首先过滤HTTP：<br><img src="https://pic1.imgdb.cn/item/67b5cc8cd0e0a243d400cd8d.png" alt=""></p><p>看出为布尔盲注</p><p>我们将所有HTTP请求导入为csv文件：</p><p>分析文件，可以发现这里是在盲注db_flag库下的tb_flag表里的flag字段内容：</p><p><img src="https://pic1.imgdb.cn/item/67b5ce3cd0e0a243d400cdcc.png" alt=""></p><p>提取出flag的值：</p><p>102 108 97 103 123 52 55 101 100 98 56 51 48 48 101 100 53 102 57 98 50 56 102 99 53 52 98 48 100 48 57 101 99 100 101 102 55 125</p><p>sql注入的时,使用的是十进制ascii码，转换回字符，得到flag：</p><p><img src="https://pic1.imgdb.cn/item/67b5cfcbd0e0a243d400ce01.png" alt=""></p><p>flag{47edb8300ed5f9b28fc54b0d09ecdef7}</p><h2 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h2><p>附件为docx文档：</p><p><img src="https://pic1.imgdb.cn/item/67b5d059d0e0a243d400ce20.png" alt=""></p><p>这是一篇关于“黑客”的介绍，并没有相关提示信息</p><p>文章中也不存在文字的隐写。</p><p>因此，我们从整个文件的角度进行分析。</p><p>将文档放入010 editor，发现文件头是zip的文件头，说明整个文件应该是一个zip压缩包。</p><p><img src="https://pic1.imgdb.cn/item/67b5d193d0e0a243d400ce51.png" alt=""></p><p>于是，将文件后缀名改为zip，进行解压</p><p><img src="https://pic1.imgdb.cn/item/67b5d1dcd0e0a243d400ce56.png" alt=""></p><p>在/word/media/文件夹中，我们找到了flag：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250219204449954.png" alt="image-20250219204449954"></p><p>flag{unz1p_3v3ryth1ng}</p><h2 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h2><p>流量分析题，用wireshark打开流量包：</p><p>过滤http：</p><p><img src="https://pic1.imgdb.cn/item/67b5ee78d0e0a243d400d3d6.png" alt=""></p><p>发现有许多图片</p><p>导出http对象：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250219224553795.png" alt="image-20250219224553795"></p><p>发现logo.png中是一个旗帜，推测可能与flag有关</p><p>这里参考了WP，使用stegslove打开scanlines.png，在很多通道都发现了一条线：</p><p><img src="https://pic1.imgdb.cn/item/67b5ef39d0e0a243d400d3ef.png" alt=""></p><p>其次，在logo.png中间有一条空缺</p><p>将两张图片使用stegslove进行Image Combiner：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250219225407569.png" alt="image-20250219225407569"></p><p>在SUB发现flag</p><h2 id="ACTF新生赛2020-swp"><a href="#ACTF新生赛2020-swp" class="headerlink" title="[ACTF新生赛2020]swp"></a>[ACTF新生赛2020]swp</h2><p>流量分析题，直接wireshark打开流量包：</p><p><img src="https://pic1.imgdb.cn/item/67b5f23cd0e0a243d400d46d.png" alt=""></p><p>过滤http，导出对象</p><p><img src="https://pic1.imgdb.cn/item/67b5f2d2d0e0a243d400d4aa.png" alt=""></p><p>发现有一个可疑的压缩包secret.zip</p><p>进行导出：</p><p>压缩包有密码，用010 editor打开，发现是伪加密：</p><p><img src="https://pic1.imgdb.cn/item/67b5f361d0e0a243d400d4d5.png" alt=""></p><p>进行修复后，直接解压：</p><p>得到的flag直接放入随波逐流，得到flag</p><p><img src="https://pic1.imgdb.cn/item/67b5f3ddd0e0a243d400d4f1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/2025/02/17/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/17/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#  %格式化输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;czxh&#x27;</span></span><br><span class="line"><span class="string">age=18</span></span><br><span class="line"><span class="string">print(&quot;我的姓名：%s 我的年龄：%06d&quot; % (name,age))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=4.3</span></span><br><span class="line"><span class="string">print(&quot;%.6f&quot;%s)#设置小数点位数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  f格式化输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(f&quot;我的名字是&#123;name&#125;,年龄是&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">format方法是Python中用于字符串格式化的内置方法，它允许你将指定的值插入到字符串的占位符中。‌</span></span><br><span class="line"><span class="string">基本用法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ‌插入变量‌：在字符串中使用“&#123;&#125;”包围变量名，然后在format函数中列出变量和对应的值。例如：&quot;The value is: &#123;&#125;&quot;.format(100) 输出为 &quot;The value is: 100&quot;。‌1</span></span><br><span class="line"><span class="string">    ‌指定位置‌：在格式字符串中的“&#123;&#125;”里可以使用数字指定变量的位置。例如：&quot;&#123;&#125; and &#123;&#125;&quot;.format(&quot;apple&quot;, &quot;banana&quot;) 输出为 &quot;apple and banana&quot;。‌1</span></span><br><span class="line"><span class="string">    ‌格式化数据类型‌：在“&#123;&#125;”内可以使用特定的格式代码来指定数据的显示方式。例如：&quot;&#123;:05d&#125;&quot;.format(123) 表示用至少五位数字显示整数，不足的前面用零填充；&quot;&#123;:.2f&#125;&quot;.format(3.14159) 表示显示浮点数并保留两位小数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">高级用法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ‌复杂应用‌：format方法支持更复杂的操作，如条件判断和循环，使得字符串的输出更加灵活多变。例如，可以在format中嵌入if语句，根据条件改变输出内容。</span></span><br><span class="line"><span class="string">    ‌指定长度格式化‌：多用于学校课后作业以及面试题，日常工作较少使用。例如：&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;.format(&quot;Hello&quot;, &quot;Hello&quot;, &quot;Hello&quot;, &quot;Hello&quot;) 输出为四个&quot;Hello&quot;分行显示。‌2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ‌格式化数字‌：num = 123; print(&quot;&#123;:05d&#125;&quot;.format(num)) 输出为 &quot;00123&quot;。</span></span><br><span class="line"><span class="string">    ‌控制浮点数精度‌：float_num = 3.14159; print(&quot;&#123;:.2f&#125;&quot;.format(float_num)) 输出为 &quot;3.14&quot;。</span></span><br><span class="line"><span class="string">    ‌使用条件判断‌：&quot;温度是&#123;:&#125;&#123;&#125;&quot;.format(temp_sign)，当温度为正时，temp_sign为空字符串，否则为“负”。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过合理使用format方法，可以根据需要精确地控制字符串的输出格式，使代码更加简洁和易于理解。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#算术运算符(使用算术运算符，只要其中有浮点数，结果就用浮点数表示)</span></span><br><span class="line"><span class="comment">#    // 取整除，向下取整，（只要有小数，则忽略）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(7//2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   % 取余数（取模）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(5%2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   **  幂    m**n  m的n次方</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(7**2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#赋值运算符</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">num1=5</span></span><br><span class="line"><span class="string">num2=8</span></span><br><span class="line"><span class="string">num3=num1</span></span><br><span class="line"><span class="string">num4=num1+num2</span></span><br><span class="line"><span class="string">print(num1)</span></span><br><span class="line"><span class="string">print(num4)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a=1</span></span><br><span class="line"><span class="string">a=a+1</span></span><br><span class="line"><span class="string">a+=1   #a+=1 等价于 a=a+1</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转义字符</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">\t  制表符</span></span><br><span class="line"><span class="string">\n  换行——将当前位置移动到下一行开头</span></span><br><span class="line"><span class="string">\r  回车——将当前位置移动到本行开头</span></span><br><span class="line"><span class="string">\\  输出 \</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r 原生字符串，默认不转义！</span></span><br><span class="line"><span class="string">print(r&quot;\r\n\t&quot;)   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#if 判断</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if 5:</span></span><br><span class="line"><span class="string">    print(&quot;haha1111&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#逻辑运算符  and   or   not</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a=&#x27;haha&#x27;</span></span><br><span class="line"><span class="string">b=&#x27;heihei&#x27;</span></span><br><span class="line"><span class="string">if a==&#x27;haha&#x27; and b==&#x27;heihei&#x27;:  #左右两边都符合为真</span></span><br><span class="line"><span class="string">    print(&#x27;666666666&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if a==&#x27;haha&#x27; or b==&#x27;666&#x27;:</span></span><br><span class="line"><span class="string">    print(&#x27;777777777&#x27;) #有一边为真则为真</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(3&lt;9)#返回True</span></span><br><span class="line"><span class="string">print(not 3&lt;9)#返回False    #  not 表示相反的结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#基本格式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if 1:</span></span><br><span class="line"><span class="string">    print(&quot;11111&quot;)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    print(&quot;222222&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#if_elif_else格式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if 1==2:</span></span><br><span class="line"><span class="string">    print(&quot;1111111&quot;)</span></span><br><span class="line"><span class="string">elif 1==3:</span></span><br><span class="line"><span class="string">    print(&quot;222222&quot;)</span></span><br><span class="line"><span class="string">elif 1==1:</span></span><br><span class="line"><span class="string">    print(&quot;55555&quot;)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">   print(&quot;00000&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三目运算：</span></span><br><span class="line"><span class="comment"># 格式：       为真结果 if 条件 else 为假结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">i=1</span></span><br><span class="line"><span class="string">while i&lt;=5:</span></span><br><span class="line"><span class="string">    print(&quot;1111&quot;)</span></span><br><span class="line"><span class="string">    i+=1</span></span><br><span class="line"><span class="string"># 死循环</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    print(&quot;1&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#while循环计算1+2+3……+100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=0</span></span><br><span class="line"><span class="string">out=0</span></span><br><span class="line"><span class="string">while s&lt;=100:</span></span><br><span class="line"><span class="string">    out+=s</span></span><br><span class="line"><span class="string">    s+=1</span></span><br><span class="line"><span class="string">print(out)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环——也叫做迭代循环</span></span><br><span class="line"><span class="comment">#格式如下：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for 临时变量 in 可迭代对象:</span></span><br><span class="line"><span class="string">    循环满足条件执行的代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#可迭代对象就是要去遍历取值的整体，字符串是可迭代对象,能被for循环遍历取值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s=&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="string">for i in s:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># range()函数用来记录循环次数，相当于计数器</span></span><br><span class="line"><span class="comment"># range()里面有三个参数，分别为start,end,step</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(1,6):</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span><span class="comment"># range 的 （   ） 遵循包前不包后原则，以上输出为1，2，3，4，5，类似于数学中的区间  [    )</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(5):</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span><span class="comment">#如果只写一个数，默认为循环次数，从0开始循环。以上输出为0，1，2，3，4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例题：利用for循环计算1+2+3……+100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a=1</span></span><br><span class="line"><span class="string">b=0</span></span><br><span class="line"><span class="string">for i in range(1,101):</span></span><br><span class="line"><span class="string">    b+=a</span></span><br><span class="line"><span class="string">    a+=1</span></span><br><span class="line"><span class="string">print(b)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  break 和  continue</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">break: 结束循环</span></span><br><span class="line"><span class="string">continue: 结束本次循环，进入下一次循环//////continue使用前注意修改计数器，否则会陷入死循环</span></span><br><span class="line"><span class="string">注：只能放到循环里面</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串编码-（本质上是二进制与语言文字的一一对应关系）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Unicode：所有字符都是2个字节</span></span><br><span class="line"><span class="string">优点：字符与数字之间的转换速度快</span></span><br><span class="line"><span class="string">缺点：占用空间大</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">UTF-8: 对不同的字符用不同的长度表示</span></span><br><span class="line"><span class="string">优点：节省空间</span></span><br><span class="line"><span class="string">缺点：字符与数字的转换速度慢，每次都要计算字符要用多少个字节来表示</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串编码转换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.编码：  encode()</span></span><br><span class="line"><span class="string">    将其他编码的字符串转换成Unicode编码</span></span><br><span class="line"><span class="string">2.解码：  decode()</span></span><br><span class="line"><span class="string">    将Unicode编码的字符串转换成其他编码的字符串</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = &#x27;hello&#x27;</span></span><br><span class="line"><span class="string">print(type(a))#打印数据类型，输出&lt;class &#x27;str&#x27;&gt;，字符串类型</span></span><br><span class="line"><span class="string">a1 = a.encode()#进行编码</span></span><br><span class="line"><span class="string">print(a1)#打印a1,输出 b&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">print(type(a1))#打印数据类型，输出&lt;class &#x27;bytes&#x27;&gt;，以字节为单位进行处理</span></span><br><span class="line"><span class="string">a2 = a1.decode()#解码</span></span><br><span class="line"><span class="string">print(a2,type(a2))#输出 hello &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#x27;hello world!!!&#x27;</span></span><br><span class="line"><span class="string">s1=s.encode(&quot;utf-8&quot;)</span></span><br><span class="line"><span class="string">print(s1,type(s1))</span></span><br><span class="line"><span class="string">s2=s1.decode(&quot;utf-8&quot;)</span></span><br><span class="line"><span class="string">print(s2,type(s2))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;hello world!!!&#x27; &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"><span class="string">hello world!!! &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ‘+’ 字符串拼接</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;10&quot;+&quot;10&quot;)    # 输出 1010</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ‘*’ 字符串重复输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;hello&quot;*5)    # 输出 hellohellohellohellohello（需要多少次，*后面写多少）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员运算符（作用：检查字符串中是否包含某个子字符串）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">in :如果包含，返回True,不包含返回False</span></span><br><span class="line"><span class="string">not in :包含返回False,不包含返回True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="string">print(&#x27;e&#x27; in name)  #返回True</span></span><br><span class="line"><span class="string">print(&#x27;i&#x27; in name)  #返回False</span></span><br><span class="line"><span class="string">print(&#x27;e&#x27; not in name)  #返回False</span></span><br><span class="line"><span class="string">print(&#x27;i&#x27; not in name)  #返回True</span></span><br><span class="line"><span class="string">print(&#x27;ell&#x27; in name)    #返回True</span></span><br><span class="line"><span class="string">print(&#x27;ell&#x27; not in name)    #返回False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下标（索引）</span></span><br><span class="line"><span class="string">&#x27;python中从左往右数，下标从0开始！！！！！！！！！！！！！！！&#x27;</span></span><br><span class="line"><span class="string">&#x27;作用：通过下标能快速找到对应的数据！&#x27;</span></span><br><span class="line"><span class="string">&#x27;   格式：字符串名[下标值]  &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;six&#x27;</span></span><br><span class="line"><span class="string">print(name[0])      #输出s</span></span><br><span class="line"><span class="string">print(name[1])      #输出i</span></span><br><span class="line"><span class="string">print(name[2])      #输出x</span></span><br><span class="line"><span class="string">#print(name[3])      #超出范围，报错！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;下标从右往左数，从-1开始！！！&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(name[-1],name[-2],name[-3])   #输出x i s</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#切片：对操作的对象截取一部分的操作</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#       语法：     [开始位置:结束未知:步长]</span></span><br><span class="line"><span class="string">#       包前不包后原则！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s=&#x27;abcdefghigklmn&#x27;</span></span><br><span class="line"><span class="string">print(s[0:4])   #输出abcd</span></span><br><span class="line"><span class="string">print(s[3:6])   #输出def</span></span><br><span class="line"><span class="string">print(s[3:])    #输出defghigklmn    表示下标3之后的全部截取</span></span><br><span class="line"><span class="string">print(s[:6])    #输出abcdef         表示下标7之前的全部截取</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(s[-1:])   #n</span></span><br><span class="line"><span class="string">print(s[:-1])   #abcdefghigklm</span></span><br><span class="line"><span class="string">#步长的绝对值大小决定切取的间隔，正负号表示切取方向，正数表示从左往右切，负数表示从右往左切,不写步长默认是1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(s[-1::1]) #输出n  表示的是从下标为-1的数从左往右切，只有s[-1]一个值</span></span><br><span class="line"><span class="string">print(s[-1:-5:-1])  #nmlk   表示从下标-1的数从右往左切，切到-5停止，不包含-5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(s[0:7:2]) #aceg   表示从左往右切片，每2个间隔取一次</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串常见操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.查找元素：</span></span><br><span class="line"><span class="comment"># find() 检测某个子字符串是否包含在字符串中，如果在就返回这个子字符串开始位置的下标，否则返回-1</span></span><br><span class="line"><span class="comment"># 格式：  find(子字符串，开始位置下标，结束位置下标)  开始和结束位置下标可以省略，表示在整个字符串中查找</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;bingbingbangbang&#x27;</span></span><br><span class="line"><span class="string">print(name.find(&#x27;b&#x27;))   #输出0，检测到bing</span></span><br><span class="line"><span class="string">print(name.find(&#x27;b&#x27;,4)) #输出4，表示从下标4向后开始查找</span></span><br><span class="line"><span class="string">print(name.find(&#x27;bing&#x27;,4,10))   #输出4，表示从下标4到10查找‘bing’</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.index()  检测某个子字符串是否包含在字符串中，如果在就返回这个子字符串开始位置的下标，否则报错！</span></span><br><span class="line"><span class="comment">#格式       index(子字符串，开始位置下标，结束位置下标)     开始和结束位置下标可以省略，表示在整个字符串中查找</span></span><br><span class="line"><span class="comment">#和find的区别：find没有找到返回-1，index则会报错！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n=&#x27;hahayou&#x27;</span></span><br><span class="line"><span class="string">#print(n.index(&#x27;h&#x27;,4))   #没有找到，会报错！</span></span><br><span class="line"><span class="string">print(n.index(&#x27;ha&#x27;))    #0 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.count()  返回某个子字符串在整个字符串中出现的次数，没有则返回0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#x27;冰冰邦邦！&#x27;</span></span><br><span class="line"><span class="string">print(s.count(&#x27;冰&#x27;))    #输出2，‘冰’出现过两次！</span></span><br><span class="line"><span class="string">print(s.count(&#x27;冰&#x27;,1))  #输出1，从1往后找‘冰’出现过1次！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断</span></span><br><span class="line"><span class="comment">#   startswith()    是否以某个字符串开头，是返回Ture，否则返回False，如果设置开始和结束位置下标，则在指定范围内查找</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#x27;heloworld&#x27;</span></span><br><span class="line"><span class="string">print(s.startswith(&#x27;he&#x27;))   #返回True</span></span><br><span class="line"><span class="string">print(s.startswith(&#x27;wor&#x27;,4))   #返回True</span></span><br><span class="line"><span class="string">print(s.startswith(&#x27;he&#x27;,1))     #返回False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   endswith()  是否以某个字符串结束，是返回Ture，否则返回False，如果设置开始和结束位置下标，则在指定范围内查找</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#x27;heloworld&#x27;</span></span><br><span class="line"><span class="string">print(s.endswith(&#x27;ld&#x27;))     #返回True</span></span><br><span class="line"><span class="string">print(s.endswith(&#x27;h&#x27;))      #返回False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   isupper()   字母是否全为大写，是返回Ture，否则返回False，如果设置开始和结束位置下标，则在指定范围内查找</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#   修改元素</span></span><br><span class="line"><span class="comment"># 1. replace()  替换    格式：replace(旧内容，新内容，替换次数)，替换次数可以省略，默认全部替换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;hahaha&#x27;</span></span><br><span class="line"><span class="string">print(name.replace(&#x27;ha&#x27;,&#x27;1&#x27;))   #输出111</span></span><br><span class="line"><span class="string">print(name.replace(&#x27;ha&#x27;,&#x27;1&#x27;,1)) #输出1haha  只替换1次</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   split() 指定分隔符来切割字符串，以列表的形式返回，如果字符串中不包含分割内容，就不进行分割，会作为一个整体</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;ha,ha,ha&#x27;</span></span><br><span class="line"><span class="string">print(name.split(&#x27;,&#x27;))  #输出 [&#x27;ha&#x27;, &#x27;ha&#x27;, &#x27;ha&#x27;] 按‘,’分割</span></span><br><span class="line"><span class="string">print(name.split(&#x27;a&#x27;))  #输出 [&#x27;h&#x27;, &#x27;,h&#x27;, &#x27;,h&#x27;, &#x27;&#x27;] 按a分割</span></span><br><span class="line"><span class="string">print(name.split(&#x27;,&#x27;,1))    #输出[&#x27;ha&#x27;, &#x27;ha,ha&#x27;] 指定只分割一次！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   capitalize(): 第一个字符大写，其他都小写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&#x27;bingBingBangbang&#x27;.capitalize())  #返回 Bingbingbangbang</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   lower()  大写字母转为小写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;BINGBINGBANGBANG&quot;.lower())   #返回bingbingbangbang</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#  upper()  小写字母转大写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;bingbingbangbang&quot;.upper()) #返回BINGBINGBANGBANG</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#     列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">定义：是处理一组有序项目的数据结构</span></span><br><span class="line"><span class="string">格式：列表名=[元素1，元素2，元素3……]</span></span><br><span class="line"><span class="string">注意：列表中所有元素放在[]中，并使用逗号隔开，一个列表中的数据类型可以不同</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">print(type(li))     # &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">列表可以进行切片操作</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(li[0:3])      # [1, 2, 3]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;列表也是可迭代对象，可以for循环遍历取值&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in li:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表常见操作</span></span><br><span class="line"><span class="comment"># 1.添加元素</span></span><br><span class="line"><span class="comment">#    append()整体添加   extend()分散添加，将另外一个类型中的元素逐一添加,只能添加可迭代对象    insert()在指定位置插入元素，原来该位置的元素会后移</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">li.append(&quot;four&quot;)</span></span><br><span class="line"><span class="string">print(li)   # 输出 [1, 2, 3, 4, &#x27;four&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li.extend(&#x27;six&#x27;)</span></span><br><span class="line"><span class="string">print(li)   # 输出 [1, 2, 3, 4, &#x27;four&#x27;, &#x27;s&#x27;, &#x27;i&#x27;, &#x27;x&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li.insert(3,&#x27;ten&#x27;)</span></span><br><span class="line"><span class="string">print(li)   # 输出 [1, 2, 3, &#x27;ten&#x27;, 4, &#x27;four&#x27;, &#x27;s&#x27;, &#x27;i&#x27;, &#x27;x&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改元素</span></span><br><span class="line"><span class="comment">#直接通过下标就可以进行修改</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">print(li[1])    #输出2</span></span><br><span class="line"><span class="string">li[1]=&#x27;ha&#x27;</span></span><br><span class="line"><span class="string">print(li[1])    #输出ha</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找元素</span></span><br><span class="line"><span class="comment"># in       not in   和字符串中的用法一样</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">l=[1,2,3]</span></span><br><span class="line"><span class="string">print(1 in l)   #返回True</span></span><br><span class="line"><span class="string">print(1 not in l)   #返回False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例：(检测用户输入昵称是否存在)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name_list=[&#x27;my3171&#x27;,&#x27;qwer&#x27;,&#x27;bingbingbangbang&#x27;,&#x27;Y&amp;Y&#x27;,&#x27;我真的害怕极了&#x27;]</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    name=input(&quot;请输入您的昵称！&quot;)</span></span><br><span class="line"><span class="string">    if name in name_list:</span></span><br><span class="line"><span class="string">        print(f&quot;昵称&#123;name&#125;已被占用！&quot;)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        name_list.append(name) #把新的昵称放入列表</span></span><br><span class="line"><span class="string">        print(f&quot;成功注册昵称&#123;name&#125;！&quot;)</span></span><br><span class="line"><span class="string">        print(name_list)</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># index 返回指定数据所在位置的下标，如果查找的数据不存在就会报错</span></span><br><span class="line"><span class="comment"># count 统计指定数据在当前列表出现的次数</span></span><br><span class="line"><span class="comment"># 跟字符串用法相同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除列表元素</span></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br><span class="line"><span class="string">#del li      #删除整个列表</span></span><br><span class="line"><span class="string">#print(li)   #报错，因为列表已经被删除！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">del li[2]</span></span><br><span class="line"><span class="string">print(li)   #[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;]    根据下标删除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line"><span class="comment">#删除指定下标的数据，不写下标python3版本会默认删除最后一个元素！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">l=[1,2,3,4]</span></span><br><span class="line"><span class="string">l.pop()</span></span><br><span class="line"><span class="string">print(l)    #[1, 2, 3]</span></span><br><span class="line"><span class="string">l.pop(2)</span></span><br><span class="line"><span class="string">print(l)    #[1, 2] 指定下标删除，超出下标范围则报错！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#remove</span></span><br><span class="line"><span class="comment">#根据元素的值进行删除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;bbbb&#x27;]</span></span><br><span class="line"><span class="string">li.remove(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">print(li)   #[1, 2, 3, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;bbbb&#x27;]</span></span><br><span class="line"><span class="string">li.remove(2)</span></span><br><span class="line"><span class="string">print(li)   #[1, 3, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;bbbb&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#如果有重复的元素，默认删除最开始出现的元素</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#   列表排序</span></span><br><span class="line"><span class="comment">#   sort():将列表按照特定顺序重新排列，默认从小到大</span></span><br><span class="line"><span class="comment">#   reverse():倒序，将列表倒置过来</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,5,2,7,4,3,0,9,8]</span></span><br><span class="line"><span class="string">li.sort()</span></span><br><span class="line"><span class="string">print(li)   #[0, 1, 2, 3, 4, 5, 7, 8, 9]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li.reverse()</span></span><br><span class="line"><span class="string">print(li)   #[9, 8, 7, 5, 4, 3, 2, 1, 0]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#【重点】【列表推导式】</span></span><br><span class="line"><span class="comment">#格式：     [表达式 for 变量 in 列表]  或  [表达式 for 变量 in 列表 if 条件]</span></span><br><span class="line"><span class="comment"># in 后面不仅仅可以放列表，还可以放range()函数，可迭代对象</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">[print(i) for i in li]      #输出1 2 3 4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li=[]</span></span><br><span class="line"><span class="string">[li.append(i) for i in range(0,9)]</span></span><br><span class="line"><span class="string">print(li)       # 输出[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#把奇数放进列表</span></span><br><span class="line"><span class="string">li=[]</span></span><br><span class="line"><span class="string">[li.append(i) for i in range(0,9) if(i%2!=0)]</span></span><br><span class="line"><span class="string">print(li)       # 输出[1, 3, 5, 7]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#把1-50的偶数放进列表</span></span><br><span class="line"><span class="string">li=[]</span></span><br><span class="line"><span class="string">[li.append(i) for i in range(1,51) if(i%2==0)]</span></span><br><span class="line"><span class="string">print(li)       # 输出[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列表嵌套————一个列表里面又有列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,[4,5,6],7,8,9]    #[4,5,6]是内层列表</span></span><br><span class="line"><span class="string">print(li[3])    # 输出[4, 5, 6]   取出里面的列表</span></span><br><span class="line"><span class="string">print(li[3][0]) # 输出4     取出内列表中的元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">格式：元组名=(元素1,元素2,元素3)</span></span><br><span class="line"><span class="string">注意：所有元素放在()中，并使用逗号隔开，一个元组中的数据类型可以不同,元组中只有一个元素的时候，末尾必须加上逗号！！！！</span></span><br><span class="line"><span class="string">应用场景：</span></span><br><span class="line"><span class="string">    1.  函数的参数和返回值  </span></span><br><span class="line"><span class="string">    2.  %格式化输出后面的()本质上是一个元组</span></span><br><span class="line"><span class="string">    3.  数据不可以被修改，保护数据的安全</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">t=(1,2,3,4)</span></span><br><span class="line"><span class="string">print(type(t))  # &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="string">tua=() #定义空元组</span></span><br><span class="line"><span class="string">tp=(1,) #定义只有一个元素的元组</span></span><br><span class="line"><span class="string">print(t[2]) #输出3</span></span><br><span class="line"><span class="string">print(len(t))   #输出4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#注意：元组只能支持查询操作，不支持进行增加，删除，修改的操作！！！  （与列表的区别），元组可以使用count(),index(),len()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组可以进行切片操作！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(t[2:])    #输出(3, 4)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字典</span></span><br><span class="line"><span class="comment">#格式： dic=&#123;&#x27;name&#x27;:&#x27;my3171&#x27;,&#x27;age&#x27;:&#x27;18&#x27;&#125;     </span></span><br><span class="line"><span class="comment">#通过键值对的形式进行保存，键和值之间用冒号隔开，键值对之间用逗号隔开，</span></span><br><span class="line"><span class="comment">#键具有唯一性，但值可以重复</span></span><br><span class="line"><span class="comment">#格式： 字典名=&#123;键1:值1,键2:值2,键3:值3，键4:值4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:&#x27;my3171&#x27;,&#x27;age&#x27;:&#x27;18&#x27;&#125;</span></span><br><span class="line"><span class="string">print(type(dic))    # &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#键名具有唯一性，如果键名重复，不会报错，但前面的值会被后面的值覆盖</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:&quot;111&quot;,&quot;name&quot;:&quot;222&quot;&#125;</span></span><br><span class="line"><span class="string">print(dic)  # 输出&#123;&#x27;name&#x27;: &#x27;222&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#【字典的常见操作】</span></span><br><span class="line"><span class="comment">#1.查找元素(字典中没有下标，查找元素需要根据键名！！！！)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.      变量名[键名]        若键名不存在则报错</span></span><br><span class="line"><span class="string">2.      变量名.get(键名)    若键名不存在则返回None,或者自定义返回内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:3171,&#x27;age&#x27;:18&#125;</span></span><br><span class="line"><span class="string">print(dic[&#x27;age&#x27;])   #输出 18</span></span><br><span class="line"><span class="string">print(dic.get(&#x27;name&#x27;))  #输出 3171</span></span><br><span class="line"><span class="string">print(dic.get(&#x27;haha&#x27;))  #输出 None</span></span><br><span class="line"><span class="string">print(dic.get(&#x27;haha&#x27;,&#x27;不存在&#x27;)) #输出 不存在</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改元素(字典通过键名修改)</span></span><br><span class="line"><span class="comment">#格式： 变量名[键名]=值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:3171,&#x27;age&#x27;:18&#125;</span></span><br><span class="line"><span class="string">dic[&#x27;age&#x27;]=20</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 20&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.添加元素</span></span><br><span class="line"><span class="comment">#格式： 变量名[键名]=值     （注意：键名存在就修改，不存在就新增！！！！）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:3171,&#x27;age&#x27;:18&#125;</span></span><br><span class="line"><span class="string">dic[&#x27;tel&#x27;]=&#x27;1333333&#x27;</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.删除元素</span></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line"><span class="comment"># 删除整个字典： del 字典名</span></span><br><span class="line"><span class="comment"># 删除指定的键值对，键名不存在就会报错：   del 字典名[键名]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">del dic[&#x27;tel&#x27;]</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear 清空整个字典里的内容，但保留这个字典</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">dic.clear()</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop 删除指定键值对，键不存在就会报错，不写键名也报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">dic.pop(&#x27;tel&#x27;)</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># popitem() 3.7之前的版本是随机删除一个键值对，3.7之后是默认删除最后一个键值对</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典常见操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求长度    len()</span></span><br><span class="line"><span class="comment"># 返回字典里面包含的所有键名    keys()</span></span><br><span class="line"><span class="comment"># 返回字典里面包含的所有值    values()</span></span><br><span class="line"><span class="comment"># 返回字典里面包含的所有键值对(元组形式)    items()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">print(len(dic))     # 输出 3    （字典中有3个键值对）</span></span><br><span class="line"><span class="string">print(dic.keys())   # 输出 dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;tel&#x27;])</span></span><br><span class="line"><span class="string">print(dic.values()) # 输出 dict_values([3171, 18, &#x27;1333333&#x27;])</span></span><br><span class="line"><span class="string">print(dic.items())  # 输出 dict_items([(&#x27;name&#x27;, 3171), (&#x27;age&#x27;, 18), (&#x27;tel&#x27;, &#x27;1333333&#x27;)])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in dic.keys():</span></span><br><span class="line"><span class="string">    print(i)        #只取出键名</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name</span></span><br><span class="line"><span class="string">age</span></span><br><span class="line"><span class="string">tel</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in dic.values():</span></span><br><span class="line"><span class="string">    print(i)        #只取出值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3171</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">1333333</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in dic.items():</span></span><br><span class="line"><span class="string">    print(i)        #取出键值对(元组形式)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(&#x27;name&#x27;, 3171)</span></span><br><span class="line"><span class="string">(&#x27;age&#x27;, 18)</span></span><br><span class="line"><span class="string">(&#x27;tel&#x27;, &#x27;1333333&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合</span></span><br><span class="line"><span class="comment"># 格式：    s=&#123;1,2,3&#125;</span></span><br><span class="line"><span class="comment"># 注意：    1. 集合是无序的，里面的元素是唯一的     2. 可以用于元组或列表去重</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#123;1,2,3&#125;</span></span><br><span class="line"><span class="string">print(type(s))      # 输出 &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"><span class="string">print(s)            # 输出 &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="string"># 注意： s=&#123;&#125;是定义空字典，如果要定义空集合，则用：     s=set()</span></span><br><span class="line"><span class="string">s=set()</span></span><br><span class="line"><span class="string">print(type(s))      # 输出 &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"><span class="string">#集合具有无序性：</span></span><br><span class="line"><span class="string">s1=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;&#125;</span></span><br><span class="line"><span class="string">s2=&#123;1,2,3,4,5,6&#125;</span></span><br><span class="line"><span class="string">print(s1)  #每次运行结果都不同</span></span><br><span class="line"><span class="string">print(s2)   #每次运行结果相同，都是&#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="string">#出现这种现象的原因是    集合元素无序性的实现方式涉及到hash表</span></span><br><span class="line"><span class="string">print(hash(&#x27;a&#x27;)) #每次运行结果都不同，哈希值不同，在哈希表中的位置不同，这就实现了集合的无序性</span></span><br><span class="line"><span class="string">print(hash(1)) #每次运行结果都是1，python中int整形的哈希值就是它本身，在哈希表中的位置不会发生变换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 无序性：不能修改集合中的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#集合具有唯一性，可以自动去重</span></span><br><span class="line"><span class="string">s=&#123;1,2,1,3,4,4,5,2&#125;</span></span><br><span class="line"><span class="string">print(s) #输出 &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合常见操作：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">add()   添加的是一个整体</span></span><br><span class="line"><span class="string">update()    把传入的元素拆分，个个放入集合中</span></span><br><span class="line"><span class="string">remove()    选择数字有就删除，没有就报错</span></span><br><span class="line"><span class="string">pop()   进行无序排列，然后将左边第一个元素删除</span></span><br><span class="line"><span class="string">discard()   选择元素删除，没有不进行任何操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add() 添加的是一个整体</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s2=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">print(&quot;原集合：&quot;,s2)</span></span><br><span class="line"><span class="string">s2.add(5)</span></span><br><span class="line"><span class="string">print(&quot;现集合：&quot;,s2)</span></span><br><span class="line"><span class="string"># 注意：由于集合具有唯一性，如果需要添加的元素在原集合中已经存在，就不会进行任何操作</span></span><br><span class="line"><span class="string">s2.add(1)</span></span><br><span class="line"><span class="string">print(s2)  #输出&#123;1, 2, 3, 4, 5&#125; 并没有多添加一个1</span></span><br><span class="line"><span class="string"># 注意：一次只能添加一个元素</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># update 把传入的元素拆分，个个放入集合中</span></span><br><span class="line"><span class="comment"># update 里面只能放入能被for循环取值的可迭代对象（字符串，列表，元组）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s2=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">s2.update(&#x27;567&#x27;)</span></span><br><span class="line"><span class="string">print(s2)  # &#123;1, 2, 3, 4, &#x27;5&#x27;, &#x27;7&#x27;, &#x27;6&#x27;&#125;</span></span><br><span class="line"><span class="string">s2.update([7,8,9])</span></span><br><span class="line"><span class="string">print(s2)  # &#123;1, 2, 3, 4, &#x27;5&#x27;, 7, &#x27;6&#x27;, 8, 9, &#x27;7&#x27;&#125;</span></span><br><span class="line"><span class="string">s2.update((33,44,55,66))</span></span><br><span class="line"><span class="string">print(s2)  # &#123;&#x27;5&#x27;, 1, 2, 3, 4, 33, 66, 7, 8, 9, 44, &#x27;6&#x27;, 55, &#x27;7&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove 选择删除的元素，如果集合中有就删除，没有则报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">s.remove(3)</span></span><br><span class="line"><span class="string">print(s) # &#123;1, 2, 4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop 里面不需要填任何东西，默认直接是删除集合根据哈希表排序后的第一个元素</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#123;1,2,3,4&#125; # 数字是有序的，删除第一个，字符串无序……</span></span><br><span class="line"><span class="string">s.pop()</span></span><br><span class="line"><span class="string">print(s)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># discard 选择要删除的元素，有就会删除，没有则不会进行任何操作(区分remove)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">print(&quot;原集合：&quot;,s)</span></span><br><span class="line"><span class="string">s.discard(3)</span></span><br><span class="line"><span class="string">print(s) # &#123;1, 2, 4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集，并集</span></span><br><span class="line"><span class="comment"># 交集 &amp;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s1=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">s2=&#123;3,4,5,6&#125;</span></span><br><span class="line"><span class="string">print(s1 &amp; s2)  # &#123;3, 4&#125;</span></span><br><span class="line"><span class="string"># 若没有交集，返回的是空集合 set()</span></span><br><span class="line"><span class="string">s3=&#123;&#x27;a&#x27;,&#x27;v&#x27;,&#x27;t&#x27;&#125;</span></span><br><span class="line"><span class="string">s4=&#123;&#x27;a&#x27;,&#x27;p&#x27;,&#x27;t&#x27;&#125;</span></span><br><span class="line"><span class="string">print(s3 &amp; s4) # &#123;&#x27;a&#x27;, &#x27;t&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集 |</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a1=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">a2=&#123;5,6,7,8&#125;</span></span><br><span class="line"><span class="string">print(a1 | a2) # &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span></span><br><span class="line"><span class="string"># 由于集合的唯一性，所以重复的元素不会多出</span></span><br><span class="line"><span class="string">s3=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">s4=&#123;3,4,7,8&#125;</span></span><br><span class="line"><span class="string">print(s3 | s4) # &#123;1, 2, 3, 4, 7, 8&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型转换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">常用的类型转换语句：</span></span><br><span class="line"><span class="string">int(x)      将x转换成一个整数</span></span><br><span class="line"><span class="string">float(x)    将x转换成一个浮点数</span></span><br><span class="line"><span class="string">str(x)      将对象x转换成字符串</span></span><br><span class="line"><span class="string">eval(str)   用来计算在字符串中的有效python表达式，并返回一个对象</span></span><br><span class="line"><span class="string">tuple(s)    将序列s转换成一个元组</span></span><br><span class="line"><span class="string">list(s)     将序列s转换成一个列表</span></span><br><span class="line"><span class="string">chr(x)      将一个整数转换成一个字符</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 1.强制转换数字类型，将纯数字组成的字符串转换成整形数字，如果字符串中有数字和正负号以外的字符，则会报错</span></span><br><span class="line"><span class="string">s=&#x27;1&#x27;</span></span><br><span class="line"><span class="string">print(type(s))          # &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">print(type(int(s)))     # &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string"># 2.浮点型转整形(会丢失小数点后的部分，只保留整数部分)</span></span><br><span class="line"><span class="string">s=12.5</span></span><br><span class="line"><span class="string">print(type(s))          # &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="string">print(type(int(s)))     # &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">print(int(s))           # 12</span></span><br><span class="line"><span class="string">s=0.1</span></span><br><span class="line"><span class="string">print(type(s),type(int(s)),s,int(s))    # &lt;class &#x27;float&#x27;&gt; &lt;class &#x27;int&#x27;&gt; 0.1 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># float()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 整形转换成浮点型，会自动添加一位小数,如果字符串中有数字,小数点和正负号以外的字符，则会报错</span></span><br><span class="line"><span class="string">print(float(11))    # 11.0</span></span><br><span class="line"><span class="string">print(float(-11))   # -11.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 将对象转换成字符串类型，任何类型都可以转换成字符串类型！</span></span><br><span class="line"><span class="string">print(str(100),type(str(100)))  # 100 &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">print(str([1,2,3]),type(str([1,2,3])))  # [1, 2, 3] &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string"># 注意：浮点型转换成字符串型会去除末位为0的小数部分</span></span><br><span class="line"><span class="string">print(str(11.30))   # 11.3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 用来计算在字符串中的有效python表达式，并返回一个对象</span></span><br><span class="line"><span class="string">print(eval(&quot;10+10&quot;))    # 20</span></span><br><span class="line"><span class="string">eval(&quot;print(&#x27;111&#x27;)&quot;)    # 111</span></span><br><span class="line"><span class="string"># 注意：eval只能用于计算单行表达式，如果需要多行，应该用 exec()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># eval 可以实现list,dict,tuple,str之间的转换</span></span><br><span class="line"><span class="string">s=&quot;[[1,2],[3,4],[5,6]]&quot;</span></span><br><span class="line"><span class="string">print(s,type(s))        # [[1,2],[3,4],[5,6]] &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">s1=eval(s)</span></span><br><span class="line"><span class="string">print(s1,type(s1))      # [[1, 2], [3, 4], [5, 6]] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a1=&quot;&#123;&#x27;name&#x27;:&#x27;bing&#x27;,&#x27;age&#x27;:18&#125;&quot;</span></span><br><span class="line"><span class="string">print(a1,type(a1))</span></span><br><span class="line"><span class="string">a2=eval(a1)             # &#123;&#x27;name&#x27;:&#x27;bing&#x27;,&#x27;age&#x27;:18&#125; &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">print(a2,type(a2))      # &#123;&#x27;name&#x27;: &#x27;bing&#x27;, &#x27;age&#x27;: 18&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 注意：eval 非常强大，但是不够安全，容易被恶意修改</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># list() 将可迭代对象转换成列表，不是则报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 支持转换成list的类型：str,tuple,dict,set</span></span><br><span class="line"><span class="string">print(list(&quot;abcde&quot;))    # [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br><span class="line"><span class="string">print(list((1,2,3,4)))  # [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">print(list(&#123;&#x27;name&#x27;:&#x27;bing&#x27;,&#x27;age&#x27;:18&#125;))   # [&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="string"># 注意：字典转列表，只取键名</span></span><br><span class="line"><span class="string">print(list(&#123;1,2,3,4&#125;))  # [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">print(list(&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;c&#x27;&#125;))  # [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"><span class="string"># 注意：集合转列表，先去重，字符串也是随机性的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深浅拷贝————只针对可变对象！！！！！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝：外层对象和内部元素都拷贝了一遍</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值（数据完全共享）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 会随着原对象一起变量</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">print(li)</span></span><br><span class="line"><span class="string">li2=li  # 直接将li赋值给li2</span></span><br><span class="line"><span class="string">print(li,li2)   # [1, 2, 3, 4] [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">li.append(6)</span></span><br><span class="line"><span class="string">print(li,li2)   # [1, 2, 3, 4, 6] [1, 2, 3, 4, 6]</span></span><br><span class="line"><span class="string"># 发现两个列表都发生了变化！！</span></span><br><span class="line"><span class="string"># 赋值相等于完全共享资源，一个值的改变会完全被另一个值共享</span></span><br><span class="line"><span class="string">print(&quot;li内存地址：&quot;,id(li))</span></span><br><span class="line"><span class="string">print(&quot;li2内存地址：&quot;,id(li2))</span></span><br><span class="line"><span class="string"># 发现内存地址相同！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝（数据半共享）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 会创建新的对象，拷贝第一层的数据，嵌套层会指向原来的内存地址！</span></span><br><span class="line"><span class="string">import copy # 导入copy模块</span></span><br><span class="line"><span class="string">li=[1,2,3,[4,5,6]]</span></span><br><span class="line"><span class="string">li2=copy.copy(li)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6]]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6]]</span></span><br><span class="line"><span class="string">print(&quot;li内存地址：&quot;,id(li))</span></span><br><span class="line"><span class="string">print(&quot;li2内存地址：&quot;,id(li2))</span></span><br><span class="line"><span class="string"># 发现内存地址不同！！！</span></span><br><span class="line"><span class="string">li.append(8)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6], 8]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6]]</span></span><br><span class="line"><span class="string"># 此时一个值改变不会共享到另一个</span></span><br><span class="line"><span class="string">#----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># 往嵌套列表里添加元素↓</span></span><br><span class="line"><span class="string">li[3].append(7)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6, 7], 8]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6, 7]]</span></span><br><span class="line"><span class="string"># 发现两个列表中的嵌套列表都添加了7这个元素！！</span></span><br><span class="line"><span class="string"># 这是因为两个列表中的嵌套列表的内存地址是一样的！↓</span></span><br><span class="line"><span class="string">print(&quot;li[3]内存地址：&quot;,id(li[3]))</span></span><br><span class="line"><span class="string">print(&quot;li2[3]内存地址：&quot;,id(li2[3]))</span></span><br><span class="line"><span class="string"># 内存地址相同！！</span></span><br><span class="line"><span class="string"># 外层的内存地址不同，但是内层的内存地址相同！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 优点：拷贝速度快，占用空间小，效率高</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝（数据完全不共享）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 外层对象和内部元素都拷贝了一遍</span></span><br><span class="line"><span class="string">import copy #导入copy模块</span></span><br><span class="line"><span class="string">li=[1,2,3,[4,5,6],7]</span></span><br><span class="line"><span class="string">li2=copy.deepcopy(li)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6], 7]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6], 7]</span></span><br><span class="line"><span class="string">print(id(li))</span></span><br><span class="line"><span class="string">print(id(li2))</span></span><br><span class="line"><span class="string"># 内存地址不同！！</span></span><br><span class="line"><span class="string">li.append(9)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6], 7, 9]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6], 7]</span></span><br><span class="line"><span class="string"># 外层数据不共享！</span></span><br><span class="line"><span class="string">li[3].append(8)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6, 8], 7, 9]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6], 7]</span></span><br><span class="line"><span class="string"># 内层数据也不共享！！</span></span><br><span class="line"><span class="string">print(id(li[3]))</span></span><br><span class="line"><span class="string">print(id(li2[3]))</span></span><br><span class="line"><span class="string"># 内存地址不同！！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 深拷贝数据变化只影响自己本身，跟原来的对象没有了任何关系！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变对象（存储空间保存的数据允许被修改）（list,dict,set)</span></span><br><span class="line"><span class="comment"># 变量对应的值可以被修改，但是内存地址不会发生改变！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">print(id(li))</span></span><br><span class="line"><span class="string">li.append(5)</span></span><br><span class="line"><span class="string">print(id(li))</span></span><br><span class="line"><span class="string"># 内存地址没有改变！！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可变对象（存储空间保存的数据不允许被修改）（int,bool,float,complex,str,tuple)</span></span><br><span class="line"><span class="comment"># 变量对应的值不可以被修改，如果修改，就会生成一个新的值，从而分配新的内存空间！</span></span><br><span class="line"><span class="comment"># 相当于重新定义！重新开辟内存空间！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=10</span></span><br><span class="line"><span class="string">print(id(s))</span></span><br><span class="line"><span class="string">s=15</span></span><br><span class="line"><span class="string">print(id(s))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 内存地址改变了！！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【函数】</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结构：</span></span><br><span class="line"><span class="string">def 函数名():</span></span><br><span class="line"><span class="string">    函数体</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">调用函数：</span></span><br><span class="line"><span class="string"> 函数名()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def login():</span></span><br><span class="line"><span class="string">    print(&quot;这是一个函数&quot;)</span></span><br><span class="line"><span class="string">login()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 注意，调用前必须确定函数已经存在！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def x_and_y(x,y):</span></span><br><span class="line"><span class="string">    return x+y</span></span><br><span class="line"><span class="string">print(x_and_y(1,2))  # 输出3！</span></span><br><span class="line"><span class="string"># return 如果返回多个值，则会以元组的形式返回给调用者！</span></span><br><span class="line"><span class="string">def hello():</span></span><br><span class="line"><span class="string">    return &quot;hello&quot;,112233</span></span><br><span class="line"><span class="string">print(hello())  # (&#x27;hello&#x27;, 112233)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的参数</span></span><br><span class="line"><span class="comment"># 1.必备参数（位置参数）</span></span><br><span class="line"><span class="comment"># 含义：传递和定义参数的顺序及个数必须一致</span></span><br><span class="line"><span class="comment"># def func(a,b)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def fun(num1,num2,num3):</span></span><br><span class="line"><span class="string">    print(num1)</span></span><br><span class="line"><span class="string">    print(num2)</span></span><br><span class="line"><span class="string">    print(num3)</span></span><br><span class="line"><span class="string">fun(1,2,3)</span></span><br><span class="line"><span class="string">fun(&#x27;bbbb&#x27;,&#x27;eeee&#x27;,&#x27;tttt&#x27;)</span></span><br><span class="line"><span class="string"># 写几个传几个，不可以多传或少传</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 2.默认参数（缺省参数）</span></span><br><span class="line"><span class="comment"># 含义：为参数提供默认值，调用函数时可以不传该默认参数的值</span></span><br><span class="line"><span class="comment"># 设置默认值没有传值会根据默认值来执行代码，传了值根据传入的值来执行代码</span></span><br><span class="line"><span class="comment"># 格式： def func(a=12)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def func(a=18):</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">func()  # 18</span></span><br><span class="line"><span class="string">func(200)   # 200</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：所有的位置参数必须出现在默认参数前，包括函数定义和调用</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def func(a=8,b):</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">func()</span></span><br><span class="line"><span class="string">func(200)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">会报错！！！</span></span><br><span class="line"><span class="string">正确写法：</span></span><br><span class="line"><span class="string">def func(b,a=8):</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 3.可变参数</span></span><br><span class="line"><span class="comment"># 含义：传入的值的数量可以改变，可以传入多个，也可以不传</span></span><br><span class="line"><span class="comment"># def func(*args)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def func(*args):# 可以将args改为其他的变量名，但args更符合规范</span></span><br><span class="line"><span class="string">    print(args)</span></span><br><span class="line"><span class="string">func(1,2,3,4,5)     # (1, 2, 3, 4, 5)   以元组形式接收</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.关键字参数</span></span><br><span class="line"><span class="comment"># 格式： def func(**kwargs)        以字典形式接收</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def fund(**kwargs):</span></span><br><span class="line"><span class="string">    print(kwargs)</span></span><br><span class="line"><span class="string">fund(name=&#x27;haha&#x27;,age=&#x27;18&#x27;)</span></span><br><span class="line"><span class="string"># 作用：可以扩展函数的功能</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【函数嵌套】</span></span><br><span class="line"><span class="comment"># 1.嵌套调用：在一个函数里面调用另外一个函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def study():</span></span><br><span class="line"><span class="string">    print(&quot;我在学习&quot;)</span></span><br><span class="line"><span class="string">def course():</span></span><br><span class="line"><span class="string">    study()</span></span><br><span class="line"><span class="string">    print(&quot;学习python&quot;)</span></span><br><span class="line"><span class="string">course()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.嵌套定义：在一个函数里面定义另外一个函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def study():    # 外函数</span></span><br><span class="line"><span class="string">    print(&quot;我在学习&quot;)</span></span><br><span class="line"><span class="string">    def course():   # 内函数</span></span><br><span class="line"><span class="string">        print(&quot;python基础&quot;)</span></span><br><span class="line"><span class="string">    course()    # 定义和调用是同级的！注意缩进！！！ 调用如果在定义里面，则永远调用不出来！</span></span><br><span class="line"><span class="string">study()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 注意！ 不要在内层函数中调用外层函数，会陷入死循环，直到超过递归的最大深度！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【作用域】——变量生效的范围，分为全局变量和局部变量</span></span><br><span class="line"><span class="comment"># 1.全局变量：函数外部定义的变量，在整个文件中都是有效的！</span></span><br><span class="line"><span class="comment"># 2.局部变量：函数内部定义的变量，从定义位置开始到函数定义结束有效！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在函数内部修改全局变量的值：可以使用global关键字</span></span><br><span class="line"><span class="comment"># 格式：global 变量名</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a=100</span></span><br><span class="line"><span class="string">def aa():</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">def bb():</span></span><br><span class="line"><span class="string">    a=200</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">def cc():</span></span><br><span class="line"><span class="string">    global a    # 声明全局变量</span></span><br><span class="line"><span class="string">    a=300</span></span><br><span class="line"><span class="string">aa()    # 100</span></span><br><span class="line"><span class="string">bb()    # 200</span></span><br><span class="line"><span class="string">cc()</span></span><br><span class="line"><span class="string">aa()    # 300</span></span><br><span class="line"><span class="string">bb()    # 200</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  nonlocal关键字： 用来声明外层局部变量</span></span><br><span class="line"><span class="comment"># 只能在嵌套函数中使用，在外部函数先进行声明，内部函数进行nonlocal声明</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a=10    # 全局变量</span></span><br><span class="line"><span class="string">def outer():    # 外函数</span></span><br><span class="line"><span class="string">    a=5         # 局部变量</span></span><br><span class="line"><span class="string">    def inner():# 内函数</span></span><br><span class="line"><span class="string">        nonlocal a  # nonlocal 会对外层进行修改！</span></span><br><span class="line"><span class="string">        a=20</span></span><br><span class="line"><span class="string">        print(&quot;inner函数中a的值：&quot;,a)</span></span><br><span class="line"><span class="string">    inner()</span></span><br><span class="line"><span class="string">    print(&quot;outer函数中a的值：&quot;,a)</span></span><br><span class="line"><span class="string">outer()</span></span><br><span class="line"><span class="string"># inner函数中a的值： 20</span></span><br><span class="line"><span class="string"># outer函数中a的值： 20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【匿名函数】</span></span><br><span class="line"><span class="comment"># 语法：函数名=lambda 形参 : 返回值(表达式)</span></span><br><span class="line"><span class="comment"># 调用：结果=函数名(实参)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">add = lambda a,b : a+b # a,b就是匿名函数的形参，a+b就是返回值的表达式，lambda不需要写return,表达式本身就是返回值</span></span><br><span class="line"><span class="string">print(add(1,2)) # 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># lambda 的参数形式：</span></span><br><span class="line"><span class="string"># 1.无参数：</span></span><br><span class="line"><span class="string">funa = lambda : &quot;bingbingbangbang&quot;</span></span><br><span class="line"><span class="string">print(funa())   # bingbingbangbang</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2.必备参数：</span></span><br><span class="line"><span class="string">func = lambda name : name</span></span><br><span class="line"><span class="string">print(func(&quot;bingbing&quot;))     # bingbing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 3.默认参数：</span></span><br><span class="line"><span class="string">fund =lambda name,age=18 : (name,age) # 返回值以元组形式！</span></span><br><span class="line"><span class="string">print(fund(&#x27;bb&#x27;))   # (&#x27;bb&#x27;, 18)</span></span><br><span class="line"><span class="string"># 默认参数必须写在非默认参数后面！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 4.可变参数/关键字参数：</span></span><br><span class="line"><span class="string">funn = lambda **kwargs : kwargs</span></span><br><span class="line"><span class="string">print(funn(name=&#x27;bbb&#x27;,age=18))  # &#123;&#x27;name&#x27;: &#x27;bbb&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【lambda】结合 if 判断</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 三目运算</span></span><br><span class="line"><span class="string">a=5</span></span><br><span class="line"><span class="string">b=8</span></span><br><span class="line"><span class="string">print(&#x27;a小于b&#x27;) if a&lt;b else print(&#x27;a大于b&#x27;) # a小于b</span></span><br><span class="line"><span class="string"># 结合lambda</span></span><br><span class="line"><span class="string">comp = lambda a,b : &quot;a比b小&quot; if a&lt;b else print(&#x27;a大于b&#x27;)</span></span><br><span class="line"><span class="string">print(comp(5,7))    # a比b小</span></span><br><span class="line"><span class="string"># 特点：lambda只能实现简单的逻辑，如果逻辑复杂且代码量较大，不建议使用lambda，降低代码的可读性</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【内置函数】</span></span><br><span class="line"><span class="comment"># 查看所有的内置函数</span></span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(builtins))</span><br><span class="line"><span class="comment"># 大写字母开头的一般是内置常量名，小写字母开头一般是内置函数名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【拆包】</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity3D游戏开发笔记（一）</title>
      <link href="/2025/02/10/unity3D%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/10/unity3D%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-ClianWorld-测试版使用脚本记录（一）"><a href="#关于-ClianWorld-测试版使用脚本记录（一）" class="headerlink" title="关于 ClianWorld 测试版使用脚本记录（一） :"></a>关于 ClianWorld 测试版使用脚本记录（一） :</h2><p><img src="https://pic1.imgdb.cn/item/67a9ad29d0e0a243d4fde3cb.png" style="zoom:5%;" /></p><h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><p>C联致力于开发的开放世界虚拟基地，基于unity游戏引擎，按照《次元永生》界海世界观进行打造。</p><p>同时，我们将继续进行游戏性的开发，探索更多的游戏模式以及可玩性，最终打造划时代的产品。</p><h3 id="记录："><a href="#记录：" class="headerlink" title="记录："></a>记录：</h3><h4 id="1-基于Character-Contorller的角色移动脚本（基础版）"><a href="#1-基于Character-Contorller的角色移动脚本（基础版）" class="headerlink" title="1.基于Character Contorller的角色移动脚本（基础版）"></a>1.基于Character Contorller的角色移动脚本（基础版）</h4><p>功能：实现游戏角色的前后移动和方向旋转</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerMovement</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> CharacterController controller;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Speed = <span class="number">10f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> RotateSpeed = <span class="number">1f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Gravity = <span class="number">-9.8f</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector3 Velocity = Vector3.zero;</span><br><span class="line">    <span class="keyword">public</span> Transform GroundCheck;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> CheckRadius = <span class="number">0.2f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> IsGround;</span><br><span class="line">    <span class="keyword">public</span> LayerMask layerMask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> JumpHeight = <span class="number">3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        controller = transform.GetComponent&lt;CharacterController&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MoveLikeWow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveLikeWow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        IsGround = Physics.CheckSphere(GroundCheck.position, CheckRadius, layerMask);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(IsGround &amp;&amp; Velocity.y&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Velocity.y = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> move = transform.forward * Speed * vertical * Time.deltaTime;</span><br><span class="line">        controller.Move(move);</span><br><span class="line"></span><br><span class="line">        Velocity.y += Gravity + Time.deltaTime;</span><br><span class="line">        controller.Move(Velocity * Time.deltaTime);</span><br><span class="line"></span><br><span class="line">        transform.Rotate(Vector3.up, horizontal * RotateSpeed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-全局场景跳转脚本（帮助界面为例）"><a href="#2-全局场景跳转脚本（帮助界面为例）" class="headerlink" title="2.全局场景跳转脚本（帮助界面为例）"></a>2.全局场景跳转脚本（帮助界面为例）</h4><p>功能：由一个场景(Scene)跳转到其他场景</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Help</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 菜单界面的场景名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> menuSceneName = <span class="string">&quot;help&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检测是否按下H键</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.H))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 加载帮助菜单场景</span></span><br><span class="line">            SceneManager.LoadScene(<span class="string">&quot;help&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-绑定按钮场景跳转脚本（开始菜单为例）"><a href="#3-绑定按钮场景跳转脚本（开始菜单为例）" class="headerlink" title="3.绑定按钮场景跳转脚本（开始菜单为例）"></a>3.绑定按钮场景跳转脚本（开始菜单为例）</h4><p>功能：通过绑定到按钮上，实现场景跳转</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FirstWorld</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadGame</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;firstworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-隐藏鼠标"><a href="#4-隐藏鼠标" class="headerlink" title="4.隐藏鼠标"></a>4.隐藏鼠标</h4><p>(修改参数可以控制鼠标指针是否显示)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">killmouse</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Cursor.visible = <span class="literal">false</span>; <span class="comment">// 隐藏鼠标</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-退出游戏（EXIT）"><a href="#5-退出游戏（EXIT）" class="headerlink" title="5.退出游戏（EXIT）"></a>5.退出游戏（EXIT）</h4><p>功能：绑定按钮，实现点击退出游戏</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExitGameButton</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnExitButtonClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用Application类的方法来退出游戏</span></span><br><span class="line">        Application.Quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-第三人称自由视角-镜头"><a href="#6-第三人称自由视角-镜头" class="headerlink" title="6.第三人称自由视角(镜头)"></a>6.第三人称自由视角(镜头)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThirdPersonCamera</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject _mainCamera;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Cinemachine&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;跟随的目标&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> GameObject CameraTarget;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;上移动的最大角度&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> TopClamp = <span class="number">70.0f</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;下移动的最大角度&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> BottomClamp = <span class="number">-30.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> _threshold = <span class="number">0.01f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> _cinemachineTargetYaw;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> _cinemachineTargetPitch;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_mainCamera == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _mainCamera = GameObject.FindGameObjectWithTag(<span class="string">&quot;MainCamera&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        _cinemachineTargetYaw = CameraTarget.transform.rotation.eulerAngles.y;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_look.sqrMagnitude &gt;= _threshold)</span><br><span class="line">        &#123;</span><br><span class="line">            _cinemachineTargetYaw += _look.x;</span><br><span class="line">            _cinemachineTargetPitch -= _look.y;</span><br><span class="line">        &#125;</span><br><span class="line">        _cinemachineTargetYaw = ClampAngle(_cinemachineTargetYaw, <span class="built_in">float</span>.MinValue, <span class="built_in">float</span>.MaxValue);</span><br><span class="line">        _cinemachineTargetPitch = ClampAngle(_cinemachineTargetPitch, BottomClamp, TopClamp);</span><br><span class="line">        CameraTarget.transform.rotation = Quaternion.Euler(_cinemachineTargetPitch, _cinemachineTargetYaw, <span class="number">0.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">ClampAngle</span>(<span class="params"><span class="built_in">float</span> lfAngle, <span class="built_in">float</span> lfMin, <span class="built_in">float</span> lfMax</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (lfAngle &lt; <span class="number">-360f</span>) lfAngle += <span class="number">360f</span>;</span><br><span class="line">        <span class="keyword">if</span> (lfAngle &gt; <span class="number">360f</span>) lfAngle -= <span class="number">360f</span>;</span><br><span class="line">        <span class="keyword">return</span> Mathf.Clamp(lfAngle, lfMin, lfMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector2 _look;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnLook</span>(<span class="params">InputValue <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _look = <span class="keyword">value</span>.Get&lt;Vector2&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-reverse3</title>
      <link href="/2025/01/15/reverse3/"/>
      <url>/2025/01/15/reverse3/</url>
      
        <content type="html"><![CDATA[<h2 id="buuctf-reverse3"><a href="#buuctf-reverse3" class="headerlink" title="buuctf-reverse3"></a>buuctf-reverse3</h2><p>题目为exe文件</p><p>首先，放入exeinfo查壳</p><p><img src="https://pic1.imgdb.cn/item/678a1273d0e0a243d4f53069.png" alt=""></p><p>发现为32位程序，无壳</p><p>用IDA打开：</p><p>分析主函数：</p><p><img src="https://pic1.imgdb.cn/item/678a12f5d0e0a243d4f53173.png" alt=""></p><p>其中，sub_4110BE函数实现了base64编码</p><p>sub_4110BE:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__cdecl <span class="title function_">sub_411AB0</span><span class="params">(<span class="type">char</span> *a1, <span class="type">unsigned</span> <span class="type">int</span> a2, <span class="type">int</span> *a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+E0h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">void</span> *v12; <span class="comment">// [esp+F8h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> *v13; <span class="comment">// [esp+104h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 || !a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v9 = a2 / <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)(a2 / <span class="number">3</span>) % <span class="number">3</span> )</span><br><span class="line">    ++v9;</span><br><span class="line">  v10 = <span class="number">4</span> * v9;</span><br><span class="line">  *a3 = v10;</span><br><span class="line">  v12 = <span class="built_in">malloc</span>(v10 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v12 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(v12, <span class="number">0</span>, v10 + <span class="number">1</span>);</span><br><span class="line">  v13 = a1;</span><br><span class="line">  v11 = a2;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v11 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_41A144[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; v11 &gt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      byte_41A144[i] = *v13;</span><br><span class="line">      --v11;</span><br><span class="line">      ++v13;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v5 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v5) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        *((_BYTE *)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v4 = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v6 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v6) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v4 = v6 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v7 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v7) = aAbcdefghijklmn[byte_41A144[<span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">        v4 = v7 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)v12 + v4) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>aAbcdefghijklmn</code>是一个全局数组，用于存放Base64编码所对应的字符</p><p><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</code></p><p>可以确定确实为base64编码。</p><p>由于最后使用strncmp函数比较Destination和Str2，我们进入Str2查找其值：<code>e3nifIH9b_C@n@dH</code></p><p>得到Str2后，可以根据main函数的原理逆解出flag</p><p>总结主函数的基本内容：</p><p><code>输入flag——base64加密——赋值给v4——复制给Destination——for循环——与Str2比较</code></p><p>那么逆向解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">&quot;e3nifIH9b_C@n@dH&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i])-i)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/678a188cd0e0a243d4f5349c.png" alt=""></p><p>得到flag</p><p>flag{i_l0ve_you}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇剑杯-2021-webshell-WP</title>
      <link href="/2025/01/13/%5B%E9%99%87%E5%89%91%E6%9D%AF%202021%5Dwebshell%EF%BC%88%E9%97%AE1%EF%BC%89/"/>
      <url>/2025/01/13/%5B%E9%99%87%E5%89%91%E6%9D%AF%202021%5Dwebshell%EF%BC%88%E9%97%AE1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="陇剑杯-2021-webshell（问1）-WP"><a href="#陇剑杯-2021-webshell（问1）-WP" class="headerlink" title="[陇剑杯 2021]webshell（问1） WP"></a>[陇剑杯 2021]webshell（问1） WP</h3><h5 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h5><p>单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：黑客登录系统使用的密码是<strong><strong><strong>_</strong></strong></strong>。。得到的flag请使用NSSCTF{}格式提交。</p><h5 id="WP："><a href="#WP：" class="headerlink" title="WP："></a>WP：</h5><p>1.下载附件，拿到黑客攻击的流量包</p><p><img src="/pic/p1/1.png" alt="1"></p><p>2.由于要找的是登录密码，因此使用http contains “login”进行过滤，看是否能找到登录信息</p><p><img src="/pic/p1/2.png" alt="2"></p><p>发现在第四个流量包中找到登录密码！从而得到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 流量分析 </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-reverse1</title>
      <link href="/2025/01/13/reverse1/"/>
      <url>/2025/01/13/reverse1/</url>
      
        <content type="html"><![CDATA[<h1 id="buuctf-Reverse1"><a href="#buuctf-Reverse1" class="headerlink" title="[buuctf] Reverse1"></a>[buuctf] Reverse1</h1><p><img src="/pic/reverse1/1.png" alt="1"></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP:"></a>WP:</h3><p>下载附件，解压，将程序用ida打开</p><p><img src="/pic/reverse1/2.png" alt="1"></p><p>找到主函数，分析得出字符str2为正确的flag</p><p><img src="/pic/reverse1/3.png" alt="1"></p><p>进入得到str2的值，即flag</p><p>然而这是初始的str2值，在主函数中，for循环对str2进行了处理，str2里面ascii码为111的字符会被转换为ascii码为48的字符</p><p><img src="/pic/reverse1/4.png" alt="1"></p><p>因此需要进行再次转换，得到flag,    flag{hell0_w0rld}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于M.Y</title>
      <link href="/2025/01/12/%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/"/>
      <url>/2025/01/12/%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>Hello，大家好！我M.Y (CZXH)，一名初级CTFer，这是我创建的第一篇博客。我将在我的博客上记录，分享我学习CTF及其他相关内容的所思所感。同时，我希望这里能成为我们交流思想，分享知识的桥梁。</p><h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><p>大家可以叫我M.Y，或者Cer。我是一位对计算机，绘画，设计，游戏等充满热情的大学生。我将在博客上持续记录和分享我学习的收获，希望通过努力，我能成为梦想中的一名CTF全栈手和网络安全领域的大神，同时能对大家在学习网络安全的道路上提供帮助，我相信分享和交流是我们不断进步的源泉。</p><h4 id="如何学习CTF"><a href="#如何学习CTF" class="headerlink" title="如何学习CTF?"></a>如何学习CTF?</h4><p>CTF（Capture The Flag）是一种网络安全竞赛，通过解决一系列安全问题来测试参赛者的技能和经验。以下是一份详细的学习指南，帮助你从零开始学习CTF。</p><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><h6 id="（一）编程语言"><a href="#（一）编程语言" class="headerlink" title="（一）编程语言"></a>（一）编程语言</h6><p>CTF题目中大多涉及编程语言，例如C、Python、Ruby等。因此需要学习一种或多种编程语言</p><h6 id="（二）计算机网络"><a href="#（二）计算机网络" class="headerlink" title="（二）计算机网络"></a>（二）计算机网络</h6><p>CTF题目中有很多与网络相关的问题，例如协议、端口、IP地址等。因此需要学习计算机网络的基本概念和知识。</p><h6 id="（三）操作系统"><a href="#（三）操作系统" class="headerlink" title="（三）操作系统"></a>（三）操作系统</h6><p>CTF题目中涉及到的很多问题都与操作系统相关，例如进程、文件系统、权限等。因此需要学习操作系统的基本概念和知识。</p><h6 id="（四）加密算法"><a href="#（四）加密算法" class="headerlink" title="（四）加密算法"></a>（四）加密算法</h6><p>CTF题目中涉及到的很多问题都与加密算法相关，例如对称加密、非对称加密、哈希函数等。因此需要学习加密算法的基本概念和知识。</p><h5 id="CTF赛题复现平台"><a href="#CTF赛题复现平台" class="headerlink" title="CTF赛题复现平台"></a>CTF赛题复现平台</h5><p><strong>BUUCTF</strong>：</p><p>拥有大量比赛的复现环境，国内较早使用动态靶机的CTF复现平台，定期举办各类公开赛，提供平台开源环境，较全的比赛Writeup。</p><p><strong>CTFHub</strong>：</p><p>各类比赛历年真题，较为体系化的技能树，较全的CTF工具集，较全的赛事日历，较全的比赛WriteUp。<strong>BugKu</strong>：国内较早的CTF复现平台，较为基础的题目，较全的WriteUp。<strong>Pwnable</strong>：适合Pwn新手入门，题目较为友好。</p><p><strong>NSSCTF：</strong></p><p>NSSCTF（National Security Service CTF）是一个多功能的在线CTF平台，适合个人和团队进行网络安全技能的训练和提升</p><pre><code>写在后面：       在这个世界上，没有一蹴而就的成功，也没有一劳永逸的成就。每一个辉煌的时刻，都是无数个日夜努力的积累；每一个耀眼的成果，都是无数次挫折后的坚持（佚名）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一个flag!</title>
      <link href="/2016/03/30/flag/"/>
      <url>/2016/03/30/flag/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b5e2741ca5d7a107881c7eef812073083d6fbd5bd19761d0d3f331a7bf682e43">072c2e61e0fc96379b99a2ae58de6f039b92399abfd8b778c6c0a47eada94e88e11ff5ad88d3a2f399c098cc03623eaba8c137c19a2adb954940255b114688c9b9446262128647d445c9a67329fe16ab921537ac15b44cb3555a2a7bec296ce4a52c857fd974117e27678d9bbd0d24b0686f003d0b4cac04003de52ff81514a3e558140fec2c571eb553c5d85106cd5527bc1153dec71c8517d5035157c1a46079c51f23600b8d3fe0644fc4a431f85a0d0206740f4bdd5e38bcf791e006603e89dcb3e1f0f1b3e7d6f76e5567d3f03f34009222b574d071fdd494f23ec468b92b779458a268f92ce82410800f17037d7467337d9bf2311ea1f25a26d5270e31313f8db1d04a6abb7f8ae5e951ff9a12a3901321b70db4482ca9f42ddab347f1198db17af2e82da3e57b3f20b5e7cd1ed486eaa7795b7f9b17d12255f8ca4f4d589253c04b276f36032ab326966e5ce7e71af96bfa833976aa3203de51a8e026</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记（加密） </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
